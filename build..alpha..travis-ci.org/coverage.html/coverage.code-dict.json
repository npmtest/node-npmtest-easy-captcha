{"/home/travis/build/npmtest/node-npmtest-easy-captcha/test.js":"/* istanbul instrument in package npmtest_easy_captcha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easy-captcha/lib.npmtest_easy_captcha.js":"/* istanbul instrument in package npmtest_easy_captcha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_easy_captcha = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_easy_captcha = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-easy-captcha/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-easy-captcha && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_easy_captcha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_easy_captcha\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_easy_captcha.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_easy_captcha.rollup.js'] =\n            local.assetsDict['/assets.npmtest_easy_captcha.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_easy_captcha.__dirname + '/lib.npmtest_easy_captcha.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easy-captcha/node_modules/easy-captcha/captcha.js":"const TEXT = 0;\nconst BUFF = 1;\nvar attempts = 3;\nvar defaultOptions = {\n    width:256,//set width,default is 256\n    height:60,//set height,default is 60\n    offset:40,//set text spacing,default is 40\n    quality:30,//set pic quality,default is 50\n    /*generate:function(){//Custom the function to generate captcha text\n         //generate captcha text here\n\t\t\t\t text = 'asd'\n         return text;//return the captcha text\n    }*/\n\t}\n\nCAP = module.exports = require('./lib/hcap.js');\n\nCAP.generate = function (options) {\t\n\tif (!options) options = defaultOptions;\n\tvar captcha = CAP(options);\t\t\n\tif (options.attempts) attemps = options.attempts\n\n\treturn function (req,res,next) {\n\t\tvar generated = captcha.get();\t\n\t  req.session.captcha = {text:generated[TEXT],attempts:0};\t  \n\t  res.end(generated[BUFF]);\t\t\n\t}\n}\n\nCAP.check = function (req,res,next) {\n\t\t\n\tif (!req.session.captcha) {\n\t\treq.session.captcha = {valid:false, errDesc:\"No Captcha\",attempts:1};\n\t\treturn next();\n\t} \n\n\treq.session.captcha.attempts = req.session.captcha.attempts+1;\n\n\tif (!req.session.captcha.text) {\n\t\treq.session.captcha.valid = false;\n\t\treq.session.captcha.errDesc = \"No Captcha\";\n\t\treturn next();\n\t}\t\n\n\tif (req.session.captcha.attempts > attempts) {\n\t\treq.session.captcha.valid = false;\n\t\treq.session.captcha.errDesc = \"Too many attempts\";\n\t\treturn next();\n\t}\n\n\tvar text =(req.body && req.body.captcha) ? req.body.captcha:'NA';\n\n\tif (req.session.captcha.text.toLowerCase() != text.toLowerCase()) {\n\t\treq.session.captcha.valid = false;\n\t\treq.session.captcha.errDesc = \"Text did not match\";\t\t\n\t\treturn next();\n\t}\t\n\n\treq.session.captcha.valid = true;\n\treq.session.captcha.errDesc = '';\n\n\treturn next();\n}\n\n","/home/travis/build/npmtest/node-npmtest-easy-captcha/node_modules/easy-captcha/lib/hcap.js":"var path = require('path');\r\nvar fs = require('fs');\r\nvar os = require('os');\r\nvar hrobj = require('../build/Release/hcaptha.node');\r\nvar dir = require('./dir.js');\r\nvar timer = require('./timer.js');\r\nvar gen_func = require('./gen.js');\r\n\r\n//ccap.create(\"abcdef\",\"/usr/local/nodejs/hcaptha/test.jpeg\",6,256,40,40,50);\r\n\r\n\r\n/*\r\nCAP类支持3种实例化\r\n1、CAP(),完全使用默认\r\n2、CAP(width,height,offset)\r\n3、CAP({\r\n\twidth:256,\r\n\theight:40,\r\n\toffset:40,\r\n\tgenerate:function(){//自定义生成随机数\r\n\t\tthis.width;\r\n\t\tthis.height;\r\n\t\treturn \"abcdefg\";\r\n\t}\r\n})\r\n*/\r\n\r\n\r\n\r\nvar ins_count = 0;//记录实例化次数\r\nvar img_path = path.join(__dirname,'../','/cap_img');\r\nvar pid = process.pid;\r\n\r\n\r\n\t\r\nvar isjpeg = (os.platform() == 'linux' || os.platform() == 'darwin')? 1 : 0;//判断是否启用jpeg,如果是为win32则只能使用bmp\r\n\r\nvar fname = isjpeg ? '.jpeg':'.bmp'\r\n\r\n\r\nvar CAP = function(args){\r\n\tif(!(this instanceof arguments.callee)) return new arguments.callee(args);\r\n\tthis.filename = img_path+'/captcha_'+ins_count+'_'+pid+'_{$number}'+fname;\r\n\tthis.width = 256;//默认验证码宽度\r\n\tthis.height = 60;//默认验证码高度\r\n\tthis.offset = 40;//默认验证码字符间隔\r\n\tthis.quality = 50;//默认图片质量\r\n\r\n\tthis._text_len = 6;//默认验证码字数\r\n\tthis.generate = null;//自定义生成随机字符串方法\r\n\tthis.fontsize = 57; //默认字体大小\r\n\r\n\tthis.is_first = true;\r\n\r\n\tthis._cache_num = 8;//默认缓存5个验证码\r\n\tthis.buf = [];//缓存数组\r\n\tthis.text_buf = [];//定义字符串内容数组\r\n\r\n\tthis._init(args);//构造函数\r\n\r\n\tthis._create = this.generate ? this._custom_create : this._default_create;\r\n\r\n\tthis._create();\r\n\t\r\n\tthis.is_first = false;\r\n}\r\nCAP.prototype._init = function(args){\r\n\tif(arguments.length<1) return;//如果不传参数，则全部使用默认值\r\n\r\n\tif(typeof arguments[0] === 'object'){//如果传递了对象，则替换默认值\r\n\t\tvar obj = arguments[0];\r\n\t\tthis.width = obj.width || this.width;\r\n\t\tthis.height = obj.height || this.height;\r\n\t\tthis.offset = obj.offset || this.offset;\r\n\t    this.quality = obj.quality || this.quality;\r\n\t\tthis.generate = obj.generate || null;\r\n\t\tthis.fontsize = obj.fontsize || this.fontsize;\r\n\t\treturn;\r\n\t}\r\n\t//如果只传递了宽，高，间隔则替换默认值\r\n\tthis.width = arguments[0] || this.width;\r\n\tthis.height = arguments[1] || this.height;\r\n\tthis.offset = arguments[2] || this.offset;\r\n\t\r\n\tthis._get_count = 0;\r\n\treturn this;\r\n}\r\n\r\nCAP.prototype._default_generate = gen_func; //设置默认验证码生成函数\r\n\r\n\r\n\r\nCAP.prototype._call_create = function(text,len,j){//调用C++的CIMG库的create函数生成验证码文件\r\n\tvar that = this;\r\n\tvar filepath = that.filename.replace('{$number}',j);\r\n\throbj.create(text, filepath, len, that.width, that.height, that.offset, that.quality,isjpeg,that.fontsize);\r\n\r\n\tif(this.is_first){\r\n\t\ttry{\r\n\t\t\tvar buffer = fs.readFileSync(filepath);\r\n\t\t}catch(e){\r\n\t\t\tconsole.log('readsync file error');\r\n\t\t}\r\n\t\tthat.buf[j] = buffer;\r\n\t\tthat.text_buf[j] = text;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfs.readFile(filepath, function(err,data){\r\n\t\t\t\tif(err) return console.log('read file error');\r\n\t\t\t\tthat.buf[j] = data;\r\n\t\t\t\tthat.text_buf[j] = text;\r\n\t});\r\n\treturn this;\r\n}\r\n\r\nCAP.prototype._default_create = function(){//默认方式创建\r\n\t\r\n\tfor(var i=0;i<this._cache_num;i++){\t\t\t\r\n\t\tthis._call_create(this._default_generate(), this._text_len, i)\r\n\t}\r\n\r\n\treturn this;\r\n}\r\n\r\nCAP.prototype._custom_create = function(){//自定义创建\r\n\t\r\n\tfor(var i=0;i<this._cache_num;i++){\t\r\n\t\tvar str = this.generate();\r\n\t\tthis._call_create(str, str.length,i);\r\n\t}\r\n\r\n\treturn this;\r\n}\r\n\r\nCAP.prototype._timer = function(){//存入计数器的函数\t\r\n\t\r\n\tthis._get_count++;//记录timer调用次数\r\n\r\n\tthis._create();\r\n}\r\n\r\n\r\nCAP.prototype.get = function(){//对外接口，返回验证码和字母\r\n\r\n\tvar num = Math.floor(Math.random()*this._cache_num);//生成随机数\r\n\r\n\treturn [this.text_buf[num], this.buf[num]];//返回字母和buffer给用户\r\n\r\n}\r\n\r\n\r\nmodule.exports = function(args){\r\n\tvar cap = CAP(args);\r\n\tins_count++;\r\n\ttimer.reg_ary.push(cap);//将实例化之后的对象注册到timer定时器中\r\n\treturn cap;\r\n};\r\n\r\ndir();//设置路径权限，清空历史文件夹\r\ntimer.loop();//启动计时器","/home/travis/build/npmtest/node-npmtest-easy-captcha/node_modules/easy-captcha/make.js":"var path = require('path');\r\nvar os = require('os');\r\nvar fs = require('fs');\r\n\r\n\r\n\r\n\r\nconsole.log(\"I'm glad you to select ccap, enjoy it!\")\r\nconsole.log(\"\")\r\nconsole.log(\"ccap is a cross plat form and portable nodejs simple captcha module, simple api and lightweight.\")\r\n\r\nif(os.platform() == 'win32'){\r\n\r\n    var lib_name = 'libjpeg.dll';\r\n\r\n\r\n\r\n\tvar bind_path = __dirname+path.sep+'binding.gyp';\r\n\ttry{\r\n\t\tfs.chmodSync(bind_path, '0777');\r\n\t\tvar binding = fs.readFileSync(bind_path).toString();\r\n\t}\r\n\tcatch(e){\r\n\t\tthrow('fail to read binding.gyp file, '+e)\r\n\t}\r\n\t\r\n\tbinding = binding.replace(/\\{\\$__dirname\\}/g,__dirname + '\\\\\\\\addon\\\\\\\\'+lib_name);\r\n\t\r\n\ttry{\r\n\t\tfs.writeFileSync(bind_path, binding)\r\n\t}\r\n\tcatch(e){\r\n\t\tthrow('update binding.gyp file error, '+e)\r\n\t}\r\n\r\n\r\n\tvar cap_img_path =  __dirname+path.sep+'cap_img';\r\n\r\n\ttry{\r\n\t\tfs.chmodSync(cap_img_path, '0777');\r\n\t}\r\n\tcatch(e){\r\n\t\tthrow('fail to set cap_img path to 0777, '+e)\r\n\t}\r\n\r\n}\r\n\r\n\r\nconsole.log(\"\")\r\nconsole.log(\"starting compile ccap! good luck!\")","/home/travis/build/npmtest/node-npmtest-easy-captcha/node_modules/easy-captcha/benchmark/generate.js":"var ccap = require('../')();\r\n\r\n\r\nvar nows = Date.now();\r\nvar count = 0;\r\nvar interval = 1000*60*2;\r\n\r\nwhile(Date.now() - nows < interval){\r\n\tvar array = ccap.get();\r\n\tcount++;\r\n\t\r\n}\r\nvar ends = Date.now();\r\nconsole.log('Generate captcha speed is : '+Math.floor(count/(ends - nows))+'/sec')","/home/travis/build/npmtest/node-npmtest-easy-captcha/node_modules/easy-captcha/lib/dir.js":"\r\nvar fs = require('fs');\r\nvar p = require('path');\r\nvar path = p.join(__dirname,'../','/cap_img');\r\nvar dir = function(){\r\n\tfs.chmodSync(path, '777');//修改访问文件夹权限\r\n\r\n\tvar fileArray = fs.readdirSync(path);//获取所有文件名\r\n\r\n\tfileArray.forEach(function(v,i){ //清空文件夹\r\n\t\tfs.unlinkSync(p.join(path,v));\r\n\t})\r\n\r\n}\r\nmodule.exports = dir;","/home/travis/build/npmtest/node-npmtest-easy-captcha/node_modules/easy-captcha/lib/gen.js":"var str_ary = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H',\r\n'I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\r\n//定义随机数组\r\n\r\nvar gen_fuc = function(){\r\n\tvar str_num = 6,\r\n\t\tr_num = str_ary.length,\r\n\t\ttext = '';\r\n\tfor(var i=0;i<str_num;i++){\r\n\t\tvar pos = Math.floor(Math.random()*r_num)\r\n\t\ttext += str_ary[pos];//生成随机数\r\n\t}\r\n\treturn text;\r\n}\r\n\r\nmodule.exports = gen_fuc;\r\n\r\n\r\n","/home/travis/build/npmtest/node-npmtest-easy-captcha/node_modules/easy-captcha/lib/timer.js":"/*\r\n验证码定时生成器器\r\n*/\r\n\r\nvar timer = {\r\n\ttimeout:1000*60,//更新验证码时间1分钟\r\n\treg_ary:[],\r\n\ttimer:function(){\r\n\t\tvar rary = this.reg_ary,\r\n\t\t\tlen = rary.length;\r\n\t\tfor(var i=0;i<len;i++){\r\n\t\t\trary[i]._timer();\r\n\t\t}\r\n\t\tthis.loop();\r\n\t},\r\n\tloop:function(){\r\n\t\tvar that = this;\r\n\t\tsetTimeout(function(){\r\n\t\t\tthat.timer();\r\n\t\t},that.timeout)\r\n\t}\r\n}\r\n\r\n//timer.loop();\r\n\r\n\r\nmodule.exports = timer;\r\n"}